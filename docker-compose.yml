x-build-args: &build_args
  INSTALL_PYTHON_VERSION: "3.10"

x-default-volumes: &default_volumes
  volumes:
    - ./:/app

services:
  db:
    image: postgres:14
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - shared-net

  flask-prod:
    build:
      context: .
      args:
        <<: *build_args
    image: "research_assistant-production"
    ports:
      - "8080:5000"
    environment:
      FLASK_ENV: ${FLASK_ENV}
      FLASK_DEBUG: ${FLASK_DEBUG}
      FLASK_APP: ${FLASK_APP}
      LOG_LEVEL: ${LOG_LEVEL}
      GUNICORN_WORKERS: ${GUNICORN_WORKERS}
      PORT: ${PORT}
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
      MAIL_SERVER: ${MAIL_SERVER}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
      MAIL_USE_TLS: ${MAIL_USE_TLS}
    command: >
      bash -c "while ! nc -z db 5432; do echo 'Waiting for DB...'; sleep 1; done &&
      gunicorn -w ${GUNICORN_WORKERS} -b 0.0.0.0:${PORT} autoapp:app"
    depends_on:
      - db
    <<: *default_volumes
    networks:
      - shared-net

  flask-manage:
    profiles: ["manage"]
    build:
      context: .
      args:
        <<: *build_args
    entrypoint: flask
    image: "research_assistant-manage"
    environment:
      FLASK_ENV: ${FLASK_ENV}
      FLASK_DEBUG: ${FLASK_DEBUG}
      FLASK_APP: ${FLASK_APP}
      PORT: ${PORT}
      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY: ${SECRET_KEY}
    stdin_open: true
    tty: true
    depends_on:
      - db
    <<: *default_volumes
    networks:
      - shared-net

volumes:
  pgdata:

networks:
  shared-net:
    external: true
